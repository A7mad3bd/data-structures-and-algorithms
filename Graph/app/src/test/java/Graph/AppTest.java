/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Graph;

//import org.junit.Test;

//import org.junit.jupiter.api.Test;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;


public class AppTest {

    @Test
    public void addVertex() {
        Graph graph = new Graph();

        graph.addVertex("1");
        graph.addVertex("2");

        assertNotNull(graph.getnodes());
        assertEquals(2, graph.size());
    }

    @Test
    public void AddEdges() {

        Graph graph = new Graph();

        graph.addVertex("1");
        graph.addVertex("2");
        graph.addEdges("1", "2");

        assertEquals("Vertex{data='1'}[Vertex{data='2'}]Vertex{data='2'}[Vertex{data='1'}]", graph.printGraph());
    }

    @Test
    public void Print() {

        Graph graph = new Graph();

        graph.addVertex("1");
        graph.addVertex("2");
        graph.addEdges("1", "2");
        assertEquals("Vertex{data='1'}[Vertex{data='2'}]Vertex{data='2'}[Vertex{data='1'}]", graph.printGraph());
    }

    @Test
    public void Neighbors() {

        Graph graph = new Graph();

        graph.addVertex("1");
        graph.addVertex("2");
        graph.addVertex("3");

        graph.addEdges("2", "3");
        graph.addEdges("1", "3");
        System.out.println(graph.getNeighbors(new Vertex("1")));
        assertEquals(1, graph.getNeighbors(new Vertex("1")).size());
        assertEquals(1, graph.getNeighbors(new Vertex("2")).size());
        assertEquals(2, graph.getNeighbors(new Vertex("3")).size());

    }

    @Test
    public void empty() {

        Graph graph = new Graph();
        assertEquals(0, graph.size());
        assertEquals("[]", graph.getnodes().toString());
    }




    @Test
    public void remove() {

        Graph graph = new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addEdges("A", "B");
        assertEquals("Vertex{data='A'}[Vertex{data='B'}]Vertex{data='B'}[Vertex{data='A'}]", graph.printGraph());
        assertEquals(2, graph.size());

        graph.removeVertex("A");
        assertEquals("Vertex{data='B'}[]", graph.printGraph());
        assertEquals(1, graph.size());
    }

    @Test
    public void removeEdge() {
        Graph graph = new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addEdges("A", "B");
        assertEquals("Vertex{data='A'}[Vertex{data='B'}]Vertex{data='B'}[Vertex{data='A'}]", graph.printGraph());

        graph.removeEdge("A", "B");
        assertEquals("Vertex{data='A'}[]Vertex{data='B'}[]", graph.printGraph());
    }

    @Test
    public void oneVertexAndOneEdge() {
        Graph graph = new Graph();

        graph.addVertex("1");
        graph.addEdges("1", "1");

        assertEquals("Vertex{data='1'}[Vertex{data='1'}, Vertex{data='1'}]", graph.printGraph());
    }
    @Test
    public void bfs() {

        Graph graph = new Graph();
        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");
        graph.addVertex("D");
        graph.addVertex("E");


        graph.addEdges("A","B");
        graph.addEdges("B","C");
        graph.addEdges("A","C");
        graph.addEdges("D","C");
        graph.addEdges("E","D");

        System.out.println(graph.bfs("C"));

    }


    @Test
    public void depthFirstTest(){

        Graph graph = new Graph();
        graph.addVertex("1");
        graph.addVertex("2");
        graph.addVertex("3");
        graph.addVertex("4");
        graph.addVertex("5");

        graph.addEdges("1","3");
        graph.addEdges("3","2");
        graph.addEdges("3","4");
        graph.addEdges("4","5");

        assertEquals("[1, 3, 4, 5, 2]", graph.dfs("1").toString());
    }

    @Test
    public void dfs1(){

        Graph graph = new Graph();

        graph.addVertex("1");
        graph.addVertex("2");
        graph.addVertex("3");
        graph.addVertex("4");

        graph.addEdges("1", "2");
        graph.addEdges("3", "4");
        graph.addEdges("4", "2");


        assertEquals("[1, 2, 4, 3]", graph.dfs("1").toString());
    }

    @Test
    public void dfs2(){

        Graph graph3 = new Graph();

        graph3.addVertex("1");
        graph3.addVertex("2");
        graph3.addVertex("3");

        graph3.addEdges("1", "2");

        assertEquals("[1, 2]", graph3.dfs("1").toString());
    }

}
